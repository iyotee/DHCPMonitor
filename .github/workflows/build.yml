name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Tauri app
        run: |
          cd src-tauri
          npx @tauri-apps/cli build --target x86_64-pc-windows-msvc

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dhcp-monitor-windows
          path: |
            src-tauri/target/release/bundle/
            src-tauri/target/release/

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install Pillow

      - name: Generate macOS icon
        run: |
          cd src-tauri/icons
          python3 create_icns.py

      - name: Build Tauri app
        run: |
          cd src-tauri
          npx @tauri-apps/cli build --target x86_64-apple-darwin

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dhcp-monitor-macos
          path: |
            src-tauri/target/release/bundle/
            src-tauri/target/release/

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev libssl-dev pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libglib2.0-dev

      - name: Build Tauri app
        run: |
          cd src-tauri
          npx @tauri-apps/cli build --target x86_64-unknown-linux-gnu

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dhcp-monitor-linux
          path: |
            src-tauri/target/release/bundle/
            src-tauri/target/release/

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          echo "üì¶ Pr√©paration des fichiers de release..."
          
          # Copier les fichiers Windows sp√©cifiques
          if [ -d "artifacts/dhcp-monitor-windows" ]; then
            echo "ü™ü Copie des fichiers Windows..."
            find artifacts/dhcp-monitor-windows -name "*.exe" -o -name "*.msi" -o -name "*.dll" | xargs -I {} cp {} release-files/
          fi
          
          # Copier les fichiers macOS sp√©cifiques
          if [ -d "artifacts/dhcp-monitor-macos" ]; then
            echo "üçé Copie des fichiers macOS..."
            find artifacts/dhcp-monitor-macos -name "*.app" -o -name "*.dmg" | xargs -I {} cp -r {} release-files/
          fi
          
          # Copier les fichiers Linux sp√©cifiques
          if [ -d "artifacts/dhcp-monitor-linux" ]; then
            echo "üêß Copie des fichiers Linux..."
            find artifacts/dhcp-monitor-linux -name "*.AppImage" -o -name "dhcp-monitor" | xargs -I {} cp {} release-files/
          fi
          
          # Lister les fichiers pr√©par√©s
          echo "üì¶ Fichiers pr√©par√©s pour la release :"
          ls -la release-files/
          echo "üìä Taille des fichiers :"
          du -h release-files/* 2>/dev/null || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: DHCP Monitor ${{ github.ref_name }}
          body: |
            # DHCP Monitor ${{ github.ref_name }}
            
            ## üöÄ Release ${{ github.ref_name }}
            
            Application moderne de surveillance DHCP avec d√©tection sp√©cifique de l'Option 50.
            
            ### üì¶ Fichiers Inclus
            
            #### Windows
            - `DHCP Monitor Pro_1.1.26_x64-setup.exe` - Installateur NSIS
            - `DHCP Monitor Pro_1.1.26_x64_en-US.msi` - Package MSI
            - `dhcp-monitor.exe` + DLLs - Version portable
            
            #### macOS
            - `DHCP Monitor Pro.app` - Application macOS
            - `DHCP Monitor Pro_1.1.26_x64.dmg` - Installateur DMG
            
            #### Linux
            - `dhcp-monitor` - Ex√©cutable Linux
            - `DHCP Monitor Pro_1.1.26_amd64.AppImage` - AppImage
            
            ### üîß Installation
            
            1. **Windows** : Utiliser l'installateur ou la version portable
            2. **macOS** : Ouvrir le DMG et glisser l'app dans Applications
            3. **Linux** : Ex√©cuter l'AppImage ou l'ex√©cutable
            
            ### ‚ö†Ô∏è Prerequisites
            - Privil√®ges administrateur/root requis pour la capture r√©seau
            - Npcap/libpcap inclus dans les installateurs
            
            ### üéØ Fonctionnalit√©s
            - Capture de paquets DHCP en temps r√©el
            - D√©tection intelligente de l'Option 50
            - Interface moderne avec th√®mes
            - Statistiques et graphiques
            - Support multiplateforme
            - V√©rification automatique des mises √† jour
            
            ### üêõ Support
            - Consulter le [README principal](https://github.com/iyotee/DHCPMonitor#readme)
            - Ouvrir une [issue](https://github.com/iyotee/DHCPMonitor/issues) en cas de probl√®me
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 